* NoMake
:PROPERTIES:
:TOC:      :include descendants :depth 2
:END:
# Add CI badges here
#+BEGIN_HTML
#+END_HTML

NoMake is a framework that runs various checks against Emacs Lisp packages.
It is an alternative to [[https://github.com/cask/cask][Cask]], [[https://github.com/alphapapa/makem.sh][makem.sh]], [[https://github.com/riscy/melpazoid/][melpazoid]], [[https://github.com/vermiculus/emake.el][emake]], [[https://gitea.petton.fr/DamienCassou/makel/][makel]], etc., but Nix-oriented and based on [[https://github.com/emacs-twist/twist.nix][twist]].
It is yet a new iteration of [[https://github.com/akirak/elinter/][elinter]] (a.k.a. emacs-package-checker, melpa-check, etc.).

It is primarily developed for [[https://github.com/orgs/emacs-twist/][emacs-twist]] org and my other Emacs Lisp packages.

NoMake heavily depends on [[https://nixos.wiki/wiki/Flakes][Nix flakes]], and you will need an understanding of flakes to use it.
:CONTENTS:
- [[#features][Features]]
  - [[#supported-checks][Supported checks]]
- [[#installation][Installation]]
- [[#usage][Usage]]
  - [[#initial-configuration][Initial configuration]]
  - [[#development-workflow][Development workflow]]
  - [[#continuous-integration][Continuous integration]]
- [[#alternatives][Alternatives]]
:END:
** Features
*** Supported checks
The following is a list of checks I plan to support:

- [X] [[https://github.com/purcell/package-lint/][package-lint]]
- [X] byte-compile with multiple Emacs versions
- [X] check-declare
- [ ] checkdoc with custom settings
- [ ] [[https://github.com/emacs-elsa/Elsa][ELSA]] with custom rules

I wish to support the following checks as well, but they are not available as an Emacs Lisp library at the time of writing:

- [ ] Experimental checks of [[https://github.com/riscy/melpazoid/][melpazoid]]
- [ ] Indentation
** Installation
NoMake requires Nix with flakes enabled.

Because nomake depends on [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] even locally, it is recommended to enable its binary cache:

#+begin_src sh
  cachix use emacs-ci
#+end_src
** Usage
*** Initial configuration
These steps are necessary for any nomake project.
**** Scaffold a project
To add nomake to an existing Emacs Lisp project, you can use =nix flake init= command:

#+begin_src sh
  nix flake init -t github:emacs-twist/nomake
#+end_src
**** Create a new branch for your MELPA recipe
If your package is already on MELPA, you can skip this subsubsection.

Whether you plan on releasing your package to [[https://melpa.org/#/][MELPA]] or not, you will need to put the recipe for your package in a branch.

Fork [[https://github.com/melpa/melpa/][the repository]] of MELPA, create a new branch from master, add a recipe (see [[https://github.com/melpa/melpa/#recipe-format][the format]]), and push it to GitHub (or any code hosting service).

Edit flake.nix to point the =melpa= to your branch:

#+begin_src nix
  {
    description = "...";
    inputs = {
      melpa = {
        url = "github:OWNER/melpa/BRANCH";
        flake = false;
      };
      # More inputs
    };
  }
#+end_src
**** Set package names
In the =outputs= section of flake.nix, set =localPackages= to a list of packages in the repository:

#+begin_src nix
  nomake.lib.mkFlake {
    src = ./.;
    localPackages = [
      # The name of your package
      "nice-mode"
    ];
  }
#+end_src
**** Explicitly install packages
You may sometimes want to explicitly install a particular package.
This applies if you depend on packages such as =org= and =project=.
They are shipped with Emacs but also actively developed, so older versions of Emacs ship outdated versions of packages.
In this situation, you should list them in =extraPackages=:

#+begin_src nix
  nomake.lib.mkFlake {
    src = ./.;
    localPackages = [
      "nice-mode"
    ];
    extraPackages = [
      # Explicitly install org packages rather than depending on the built-in
      # version
      "org"
    ];
  }
#+end_src
*** Development workflow
This subsection describes how to use nomake locally during development.

First generate lock files for your package dependencies:

#+begin_src sh
  nix run .#lock --impure
#+end_src

The dependencies are inspected from the library header of your package.
You should run this command every time you add a new dependency.
**** Linting and byte-compiling the package
For byte-compiling, a snapshot version of [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] is used.
The following command runs all checks (currently package-lint and byte-compiling):

#+begin_src sh
  nix run .#nomake -- PACKAGE
#+end_src

=PACKAGE= should be the name of the package.
**** Scripts
To run tests, you have to define a script.
Scripts are a feature that lets you run a shell script in a development environment.
In scripts, you can run Emacs with package(s) under test.
It is also possible to add extra packages for testing.

To define a script, edit flake.nix and add =scripts= attribute:

#+begin_src nix
  nomake.lib.mkFlake {
    src = ./.;
    localPackages = [
      "nice-mode"
    ];
    scripts = {
      test = {
        description = "Run buttercup tests";
        compile = true;
        extraPackages = [ "buttercup" ];
        runtimeInputsFromPkgs = pkgs: [
          pkgs.hello
        ];
        text = ''
          emacs -batch -l buttercup -f buttercup-run-discover "$PWD"
        '';
      };
    };
  };
#+end_src

In the example shown above, =test= script is defined, and [[https://github.com/jorgenschaefer/emacs-buttercup][buttercup]] is added for running the tests.
=compile = true;= means that the user package is byte-compiled when the script is run.
Tests are discovered from the working directory.

To run the script, you can use =nix run=:

#+begin_src sh
  nix run .#test
#+end_src

The application name (=test= in this case) is the same as the name of the script defined in the flake.

By adding =runtimeInputsFromPkgs=, you can specify executables which will become available in the runtime environment of the script.

Note that you can specify =extraPackages= either as a sibling of =localPackages= or inside a script block.
Wherever you define extra packages, it has the same effect.
If you define multiple =extraPackages= attributes in different places, they are merged.
***** Run a script with a different Emacs version
It is possible to run a script with different versions of Emacs.
You can pick a version available from nix-emacs-ci, but only required executables are downloaded from the binary cache.
The minimum Emacs version is determined from the library header of your local package.

To check a list of Emacs versions for your package, run the following command (=test= should be the name of your script):

#+begin_src sh
  nix eval .#packages.x86_64-linux.test.matrix --apply builtins.attrNames
#+end_src

To run the tests with Emacs 26.2, run the following command:

#+begin_src sh
  nix run .#test.matrix.emacs-26-2
#+end_src
*** Continuous integration
This subsection provides an instruction for setting up CI for Emacs Lisp projects.
At present, only GitHub Actions is supported.
**** GitHub Actions
***** Generate workflows
While it is possible to run Nix for linting your package on CI, it is slow when binary cache is unavailable.
Instead, you can use an experimental feature of nomake to generate GitHub workflows.
The generated workflows uses [[https://github.com/purcell/setup-emacs/][setup-emacs]] and installs latest packages using =package.el=.
This is a fairly standard setup in the Emacs community.
It does not always produce the same result as Nix, and it also does not support multi-package repositories well, but it is even better for submission to MELPA.

To generate workflows, run the following command:

#+begin_src sh
  nix build .#github-workflows
#+end_src

The workflow files are available in =result= directory.
To copy the files to the designated directory, you can use the following command:

#+begin_src sh
  install -m 644 result/*.* .github/workflows
#+end_src
** Alternatives
See [[https://github.com/alphapapa/makem.sh#comparisons][comparisons]] by the author of makem.

At present, nomake doesn't have as many features as makem, nor is it mature.
The goal of this project is to provide a framework for consistent quality control over Emacs Lisp library code.
Consistency does not always mean /the most strict/ or /supporting as many as checks as possible/.

Compared to the previous iteration, it avoids impure Nix code for maintainability.
** Credits
Some of the Emacs Lisp code in this repository are based on the following projects:

- [[https://github.com/alphapapa/makem.sh][makem.sh]] by Adam Porter (a.k.a. alphapapa)
- Linting code for [[https://github.com/purcell/package-lint/][package-lint]] by Steve Purcell
** License
Because this repository contains some linting code from GPL 3.0-licensed repositories, the entire repository is licensed under GPL v3.
You will have to license your projects under GPL too.
