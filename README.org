* NoMake
:PROPERTIES:
:TOC:      :include descendants :depth 2
:END:
# Add CI badges here
#+BEGIN_HTML
#+END_HTML

NoMake is a framework that runs various checks against Emacs Lisp packages.
It is an alternative to [[https://github.com/cask/cask][Cask]], [[https://github.com/alphapapa/makem.sh][makem.sh]], [[https://github.com/riscy/melpazoid/][melpazoid]], [[https://github.com/vermiculus/emake.el][emake]], [[https://gitea.petton.fr/DamienCassou/makel/][makel]], etc., but based on [[https://github.com/emacs-twist/twist.nix][twist]] and Nix-oriented.
It is yet a new iteration of [[https://github.com/akirak/elinter/][elinter]] (a.k.a. emacs-package-checker, melpa-check, etc.).

It is meant for use in emacs-twist and my other Emacs Lisp packages.

NoMake heavily depends on [[https://nixos.wiki/wiki/Flakes][Nix flakes]], and you will need an understanding of flakes to use it.
:CONTENTS:
- [[#features][Features]]
  - [[#supported-checks][Supported checks]]
- [[#installation][Installation]]
- [[#usage][Usage]]
  - [[#initial-configuration][Initial configuration]]
  - [[#development-workflow][Development workflow]]
  - [[#continuous-integration][Continuous integration]]
- [[#alternatives][Alternatives]]
:END:
** Features
*** Supported checks
The following is a list of checks I plan to support:

- [X] [[https://github.com/purcell/package-lint/][package-lint]]
- [X] byte-compile with multiple Emacs versions
- [ ] check-declare
- [ ] checkdoc with custom settings
- [ ] [[https://github.com/emacs-elsa/Elsa][ELSA]] with custom rules

I wish to support the following checks as well, but they are not available as an Emacs Lisp library at the time of writing:

- [ ] Experimental checks of [[https://github.com/riscy/melpazoid/][melpazoid]]
- [ ] Indentation
** Installation
NoMake requires Nix with flakes enabled.

Because nomake depends on [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] even locally, it is recommended to enable its binary cache:

#+begin_src sh
  cachix use emacs-ci
#+end_src
** Usage
*** Initial configuration
These steps are necessary for any nomake project.
**** Scaffold a project
To add nomake to an existing Emacs Lisp project, you can use =nix flake init= command:

#+begin_src sh
  nix flake init -t github:emacs-twist/nomake
#+end_src
**** Create a new branch for your MELPA recipe
If your package is already on MELPA, you can skip this section.

Whether you release your package to [[https://melpa.org/#/][MELPA]] or not, 
You need a recipe for your package

Fork [[https://github.com/melpa/melpa/][the repository]] of MELPA, create a new branch from master, add a recipe (see [[https://github.com/melpa/melpa/#recipe-format][the format]]), and push it to GitHub or any code hosting service.

Edit flake.nix to point the input to your branch:

#+begin_src nix
  {
    description = "...";
    inputs = {
      ...
        melpa = {
        url = "github:OWNER/melpa/BRANCH";
        flake = false;
      };
      ..
    };
  }
#+end_src
**** Set package names
In the =outputs= section of flake.nix, set =localPackages= to a list of packages in the repository:

#+begin_src nix
  nomake.lib.mkFlake {
    src = ./.;
    localPackages = [
      # The name of your package
      "nice-mode"
    ];
  }
#+end_src
*** Development workflow
This subsection describes how to use nomake locally during development.

First generate lock files for your package dependencies:

#+begin_src sh
  nix run .#lock
#+end_src
**** Linting and byte-compiling the package
For byte-compiling, a snapshot version of [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] is used.

#+begin_src sh
  nix run .#nomake -- PACKAGE
#+end_src

=PACKAGE= should be the name of the package.
**** Scripts
To run a test in an isolated Emacs session, you can define a script.
Scripts are a convenient feature that lets you run a shell script with Emacs in your PATH.
Your package is available in the session, and you can also add extra packages for your testing.

To define a script, edit flake.nix and add =scripts= attribute:

#+begin_src nix
  nomake.lib.mkFlake {
    src = ./.;
    localPackages = [
      "nice-mode"
    ];
    extraPackages = [
      "buttercup"
    ];
    scripts = {
      test = {
        description = "Run buttercup tests";
        compile = true;
        text = ''
          emacs -batch -l buttercup -f buttercup-run-discover "$PWD"
        '';
      };
    };
  };
#+end_src

The example shown above adds [[https://github.com/jorgenschaefer/emacs-buttercup][buttercup]] to the script environment and defines =test= script that runs tests.
=compile = true;= means the user package is byte-compiled when the script is run.
Tests are discovered from the working directory.

To run the script, use =nix run=:

#+begin_src sh
  nix run .#test
#+end_src

The application name (=test= in this case) is the same as the name of the script defined in the flake.
***** Run a script with a different Emacs version
It is possible to run a script with different versions of Emacs.
You can pick a version available from nix-emacs-ci, and the minimum Emacs version is inferred from the library header.
Only required executables are downloaded from the binary cache.

To check a list of Emacs versions for your package, run the following command (=test= should be the name of your script):

#+begin_src sh
  nix eval .#packages.x86_64-linux.test.matrix --apply builtins.attrNames
#+end_src

To run the test with Emacs 26.2, run the following command:

#+begin_src sh
  nix run .#test.matrix.emacs-26-2
#+end_src
*** Continuous integration
This subsection provides an instruction for setting up CI for Emacs Lisp projects.
At present, only GitHub Actions is supported.
**** GitHub Actions
***** Generate workflows
While it is possible to run Nix for linting your package with nomake, it is slow if binary cache is unavailable.
Instead, you can use an experimental feature of nomake to generate GitHub workflows.
The generated workflows uses [[https://github.com/purcell/setup-emacs/][setup-emacs]] and installs latest packages using =package.el=.
It is a fairly standard setup in the Emacs community.
It does not always produce the same result as Nix, and it also does not support multi-package repositories well, but it is even better for submission to MELPA.

To generate workflows, run the following command:

#+begin_src sh
  nix run .#github-workflows
#+end_src

The workflow files are available in =result= directory.
To copy the files to the designated directory, you can use the following command:

#+begin_src sh
  cp -vL result/*.* .github/workflows/
#+end_src
** Alternatives
See [[https://github.com/alphapapa/makem.sh#comparisons][comparisons]] by the author of makem.
